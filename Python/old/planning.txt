

TODO:
- GO THROUGH QDB, MYDB CODE, put what is necessary into db

#################
# MESSAGE SPEC: #
#################
backend to frontend:
    - stdout, stderr:
        - just strings
        - stdout begins with OUT
        - stderr begins with ERR
    - status messages
        - waiting for input at a particular line:
            - Runtime | Pause | <line_number>
frontend to backend:
    - stdin:
        - just strings, no prefix
    - For all commands, we will follow the Type, SubType, Args model
    - Editor Commands (Type = "Editor")
        - Directory (set working directory)
            - singular arg: the full path of the directory
        - File (provide a file's contents)
            - arg 1: path of file, relative to wd
            - arg 2: content
        - Run (Run the file)
            - arg 1: path of file. relative to wd
    - Runtime Commands (Type="Runtime")
        - Continue
            - no args


##################
### NETWORKING: ##
##################
- The debugger instance is the CLIENT, the unity instance is the SERVER.
This makes the most sense because Unity can ensure its server is running
before it launches the python client
- integers will be sent in big endian

MESSAGE FORMAT - all messages are in json, ActionableJsonMessage
Types of messages:
    EDITOR  - any valid action in the editor state (not running a program)
        File - provides a file name and full source
        Directory - set working directory
        Run - runs the given file, entering the run state
    RUN - any valid runtime action
